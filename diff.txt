29a30,31
> Global _d3dOccQuery:IDirect3DQuery9
> 
34a37
> 
42,44d44
< 	Case WM_ACTIVATE
< 		If _graphics _graphics.OnWMActivate(wp)
< 		Return 0
75a76,116
> 	Function CheckDepthFormat(format)
> 	    Return _d3d.CheckDeviceFormat(0,D3DDEVTYPE_HAL,D3DFMT_X8R8G8B8,D3DUSAGE_DEPTHSTENCIL,D3DRTYPE_SURFACE,format)=D3D_OK
> 	End Function
> 
> 	If flags&GRAPHICS_DEPTHBUFFER Or flags&GRAPHICS_STENCILBUFFER
> 	    pp.EnableAutoDepthStencil = True
> 	    If flags&GRAPHICS_STENCILBUFFER
> 	        If Not CheckDepthFormat( D3DFMT_D24S8 )
> 	            If Not CheckDepthFormat( D3DFMT_D24FS8 )
> 	                If Not CheckDepthFormat( D3DFMT_D24X4S4 )
> 	                    If Not CheckDepthFormat( D3DFMT_D15S1 )
> 	                        Return False
> 	                    Else
> 	                        pp.AutoDepthStencilFormat = D3DFMT_D15S1
> 	                    EndIf
> 	                Else
> 	                    pp.AutoDepthStencilFormat = D3DFMT_D24X4S4
> 	                EndIf
> 	            Else
> 	                pp.AutoDepthStencilFormat = D3DFMT_D24FS8
> 	            EndIf
> 	        Else
> 	            pp.AutoDepthStencilFormat = D3DFMT_D24S8
> 	        EndIf
> 	    Else
> 	        If Not CheckDepthFormat( D3DFMT_D32 )
> 	            If Not CheckDepthFormat( D3DFMT_D24X8 )
> 	                If Not CheckDepthFormat( D3DFMT_D16 )
> 	                    Return False
> 	                Else
> 	                    pp.AutoDepthStencilFormat = D3DFMT_D16
> 	                EndIf
> 	            Else
> 	                pp.AutoDepthStencilFormat = D3DFMT_D24X8
> 	            EndIf
> 	        Else
> 	            pp.AutoDepthStencilFormat = D3DFMT_D32
> 	        EndIf
> 	    EndIf
> 	EndIf
> 	
100a142,149
> 
> 	'Occlusion Query
> 	If Not _d3dOccQuery
> 		If _d3ddev.CreateQuery(9,_d3dOccQuery)<0 '9 hardcoded for D3DQUERYTYPE_OCCLUSION
> 			DebugLog "Cannot create Occlussion Query!"
> 		EndIf
> 	EndIf
> 	If _d3dOccQuery _d3dOccQuery.Issue(2) 'D3DISSUE_BEGIN
113a163,165
> 		If _d3dOccQuery _d3dOccQuery.Release_
> 		_d3dOccQuery = Null
> 
121,123c173,175
< 	If _graphics _graphics.OnDeviceLost()
< 
< 	If _d3dDev.Reset( _presentParams ) < 0
---
> 	If _d3dOccQuery _d3dOccQuery.Release_
> 	
> 	If _d3dDev.Reset( _presentParams )<0
126,127c178,183
< 	
< 	If _graphics _graphics.OnDeviceReset()	
---
> 
> 	If _d3ddev.CreateQuery(9,_d3dOccQuery)<0
> 		DebugLog "Cannot create Occlussion Query!"
> 	EndIf
> 	If _d3dOccQuery _d3dOccQuery.Issue(2) 'D3DISSUE_BEGIN
> 		
132,142c188
< Type TD3D9DeviceStateCallback
< 	Field _fnCallback(obj:Object)
< 	Field _obj:Object
< 	
< 	Method Create:TD3D9DeviceStateCallback(fnCallback(obj:Object), obj:Object)
< 		_fnCallback = fnCallback
< 		_obj = obj
< 
< 		Return Self
< 	EndMethod
< EndType
---
> Global UseDX9RenderLagFix:Int = 0
145,149c191
< 	Method New()
< 		_onDeviceLostCallbacks = New TList
< 		_onDeviceResetCallbacks = New TList
< 	EndMethod
< 	
---
> 
209c251
< 
---
> 		
213,262d254
< 	Method OnWMActivate(wp:Int)
< 		' this covers the alt-tab issue for render-texture management
< 		Local activate:Short = wp & $FFFF
< 		Local state:Short = (wp Shr 16) & $FFFF
< 		
< 		' only release when fullscreen
< 		If activate = 0 And _depth <> 0
< 			OnDeviceLost()
< 		EndIf
< 		' the Flip(sync) method will call into ResetD3DDevice where OnDeviceReset will be called
< 	EndMethod
< 	
< 	Method AddDeviceLostCallback(fnOnDeviceLostCallback(obj:Object), obj:Object)
< 		_onDeviceLostCallbacks.AddLast(New TD3D9DeviceStateCallback.Create(fnOnDeviceLostCallback, obj))
< 	EndMethod
< 	
< 	Method AddDeviceResetCallback(fnOnDeviceResetCallback(obj:Object), obj:Object)
< 		_onDeviceResetCallbacks.AddLast(New TD3D9DeviceStateCallback.Create(fnOnDeviceResetCallback, obj))
< 	EndMethod
< 	
< 	Method RemoveDeviceLostCallback(fnOnDeviceLostCallback(obj:Object))
< 		For Local statecallback:TD3D9DeviceStateCallback = EachIn _onDeviceLostCallbacks
< 			If statecallback._fnCallback = fnOnDeviceLostCallback
< 				_onDeviceLostCallbacks.Remove(statecallback)
< 				Exit
< 			EndIf
< 		Next
< 	EndMethod
< 
< 	Method RemoveDeviceResetCallback(fnOnDeviceResetCallback(obj:Object))
< 		For Local statecallback:TD3D9DeviceStateCallback = EachIn _onDeviceResetCallbacks
< 			If statecallback._fnCallback = fnOnDeviceResetCallback
< 				_onDeviceResetCallbacks.Remove(statecallback)
< 				Exit
< 			EndIf
< 		Next
< 	EndMethod
< 
< 	Method OnDeviceLost()
< 		For Local callback:TD3D9DeviceStateCallback = EachIn _onDeviceLostCallbacks
< 			callback._fnCallback(callback._obj)
< 		Next
< 	EndMethod
< 	
< 	Method OnDeviceReset()
< 		For Local callback:TD3D9DeviceStateCallback = EachIn _onDeviceResetCallbacks
< 			callback._fnCallback(callback._obj)
< 		Next
< 	EndMethod
< 	
292a285,286
> 		Case D3DERR_DRIVERINTERNALERROR
> 			Throw "D3D Internal Error"
363,364d356
< 	Field _onDeviceLostCallbacks:TList
< 	Field _onDeviceResetCallbacks:TList
373c365
< 		If Not d3d9Lib Return
---
> 		If Not d3d9Lib Return Null
397,401c389,393
< 			Local mode:TGraphicsMode=New TGraphicsMode
< 			mode.width=d3dmode.Width
< 			mode.height=d3dmode.Height
< 			mode.hertz=d3dmode.RefreshRate
< 			mode.depth=32
---
> 			Local Mode:TGraphicsMode=New TGraphicsMode
> 			Mode.width=d3dmode.Width
> 			Mode.height=d3dmode.Height
> 			Mode.hertz=d3dmode.RefreshRate
> 			Mode.depth=32
403c395
< 			_modes[j]=mode
---
> 			_modes[j]=Mode
431c423,427
< 	
---
> 
> 	Method Graphics:TD3D9Graphics()
> 		Return _graphics
> 	End Method
> 		
437c433,447
< 		Return _graphics.Flip( sync )
---
> 		Local present:Int = _graphics.Flip(sync)
> 		If UseDX9RenderLagFix Then
> 			Local pixelsdrawn:Int
> 			If _d3dOccQuery
> 				_d3dOccQuery.Issue(1) 'D3DISSUE_END
> 				
> 				While _d3dOccQuery.GetData( Varptr pixelsdrawn,4,1 )=1 'D3DGETDATA_FLUSH
> 					If  _d3dOccQuery.GetData( Varptr pixelsdrawn,4,1 )<0 Exit
> 				Wend
> 
> 				_d3dOccQuery.Issue(2) 'D3DISSUE_BEGIN
> 			EndIf
> 		End If
> 		
> 		Return present
453c463
< End Function
---
> End Function
\ No newline at end of file
